declare type Args = unknown[];

declare type Func<T> = (...args: Args) => PromiseLike<T> | Promise<T> | T;

declare type GeneratorFn = <T>(fn: Func<T>, ...args: Args) => Promise<T>;

declare type Limiter = GeneratorFn & {
    activeCount: number;
    pendingCount: number;
    clearQueue: () => void;
};

/**
 * pLimit creates a "limiter" function that can be used to enqueue
 * promise returning functions with limited concurrency.
 */
export declare function pLimit(concurrency: number): Limiter;

export { }
