"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha256B64Url = exports.toB64Url = exports.fromB64Url = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const crypto_1 = require("crypto");
// safely encodes and decodes base64url strings to and from buffers
const BASE64_CHAR_62 = '+';
const BASE64_CHAR_63 = '/';
const BASE64URL_CHAR_62 = '-';
const BASE64URL_CHAR_63 = '_';
const BASE64_PADDING = '=';
function base64urlToBase64(str) {
    const padLength = str.length % 4;
    if (padLength) {
        str += BASE64_PADDING.repeat(4 - padLength);
    }
    return str
        .replaceAll(BASE64URL_CHAR_62, BASE64_CHAR_62)
        .replaceAll(BASE64URL_CHAR_63, BASE64_CHAR_63);
}
function base64urlFromBase64(str) {
    return str
        .replaceAll(BASE64_CHAR_62, BASE64URL_CHAR_62)
        .replaceAll(BASE64_CHAR_63, BASE64URL_CHAR_63)
        .replaceAll(BASE64_PADDING, '');
}
function fromB64Url(str) {
    const b64Str = base64urlToBase64(str);
    return Buffer.from(b64Str, 'base64');
}
exports.fromB64Url = fromB64Url;
function toB64Url(buffer) {
    const b64Str = buffer.toString('base64');
    return base64urlFromBase64(b64Str);
}
exports.toB64Url = toB64Url;
function sha256B64Url(input) {
    return toB64Url((0, crypto_1.createHash)('sha256').update(input).digest());
}
exports.sha256B64Url = sha256B64Url;
