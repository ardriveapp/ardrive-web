"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnANT = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const aoconnect_1 = require("@permaweb/aoconnect");
const arweave_js_1 = require("../common/arweave.js");
const index_js_1 = require("../common/index.js");
const constants_js_1 = require("../constants.js");
async function spawnANT({ signer, module = constants_js_1.AOS_MODULE_ID, luaCodeTxId = constants_js_1.ANT_LUA_ID, ao = (0, aoconnect_1.connect)(), scheduler = constants_js_1.DEFAULT_SCHEDULER_ID, state, stateContractTxId, }) {
    //TODO: cache locally and only fetch if not cached
    const luaString = (await arweave_js_1.defaultArweave.transactions.getData(luaCodeTxId, {
        decode: true,
        string: true,
    }));
    const processId = await ao.spawn({
        module,
        scheduler,
        signer: await index_js_1.AOProcess.createAoSigner(signer),
    });
    const aosClient = new index_js_1.AOProcess({
        processId,
        ao,
    });
    await aosClient.send({
        tags: [
            { name: 'Action', value: 'Eval' },
            { name: 'App-Name', value: 'ArNS-ANT' },
            { name: 'Source-Code-TX-ID', value: luaCodeTxId },
        ],
        data: luaString,
        signer,
    });
    if (state) {
        await aosClient.send({
            tags: [
                { name: 'Action', value: 'Initialize-State' },
                ...(stateContractTxId !== undefined
                    ? [{ name: 'State-Contract-TX-ID', value: stateContractTxId }]
                    : []),
            ],
            data: JSON.stringify(state),
            signer,
        });
    }
    return processId;
}
exports.spawnANT = spawnANT;
