"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AoANTWriteable = exports.AoANTReadable = exports.ANT = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const types_js_1 = require("../types.js");
const index_js_1 = require("./index.js");
class ANT {
    static init({ signer, ...config }) {
        // ao supported implementation
        if ((0, types_js_1.isProcessConfiguration)(config) || (0, types_js_1.isProcessIdConfiguration)(config)) {
            if (!signer) {
                return new AoANTReadable(config);
            }
            return new AoANTWriteable({ signer, ...config });
        }
        throw new index_js_1.InvalidContractConfigurationError();
    }
}
exports.ANT = ANT;
class AoANTReadable {
    process;
    constructor(config) {
        if ((0, types_js_1.isProcessConfiguration)(config)) {
            this.process = config.process;
        }
        else if ((0, types_js_1.isProcessIdConfiguration)(config)) {
            this.process = new index_js_1.AOProcess({
                processId: config.processId,
            });
        }
        else {
            throw new index_js_1.InvalidContractConfigurationError();
        }
    }
    async getState() {
        const tags = [{ name: 'Action', value: 'State' }];
        const res = await this.process.read({
            tags,
        });
        return res;
    }
    async getInfo() {
        const tags = [{ name: 'Action', value: 'Info' }];
        const info = await this.process.read({
            tags,
        });
        return info;
    }
    /**
     * @param undername @type {string} The domain name.
     * @returns {Promise<ANTRecord>} The record of the undername domain.
     * @example
     * Get the current record
     * ```ts
     * ant.getRecord({ undername: "john" });
     * ```
     */
    async getRecord({ undername }) {
        const tags = [
            { name: 'Sub-Domain', value: undername },
            { name: 'Action', value: 'Record' },
        ];
        const record = await this.process.read({
            tags,
        });
        return record;
    }
    /**
     * @returns {Promise<Record<string, ANTRecord>>} All the undernames managed by the ANT.
     * @example
     * Get the current records
     * ```ts
     * ant.getRecords();
     * ````
     */
    async getRecords() {
        const tags = [{ name: 'Action', value: 'Records' }];
        const records = await this.process.read({
            tags,
        });
        return records;
    }
    /**
     * @returns {Promise<string>} The owner of the ANT.
     * @example
     * Get the current owner
     * ```ts
     *  ant.getOwner();
     * ```
     */
    async getOwner() {
        const info = await this.getInfo();
        return info.Owner;
    }
    /**
     * @returns {Promise<string[]>} The controllers of the ANT.
     * @example
     * Get the controllers of the ANT.
     * ```ts
     * ant.getControllers();
     * ```
     */
    async getControllers() {
        const tags = [{ name: 'Action', value: 'Controllers' }];
        const controllers = await this.process.read({
            tags,
        });
        return controllers;
    }
    /**
     * @returns {Promise<string>} The name of the ANT (not the same as ArNS name).
     * @example
     * Get the current name
     * ```ts
     * ant.getName();
     * ```
     */
    async getName() {
        const info = await this.getInfo();
        return info.Name;
    }
    /**
     * @returns {Promise<string>} The name of the ANT (not the same as ArNS name).
     * @example
     * The current ticker of the ANT.
     * ```ts
     * ant.getTicker();
     * ```
     */
    async getTicker() {
        const info = await this.getInfo();
        return info.Ticker;
    }
    /**
     * @returns {Promise<Record<WalletAddress, number>>} The balances of the ANT
     * @example
     * The current balances of the ANT.
     * ```ts
     * ant.getBalances();
     * ```
     */
    async getBalances() {
        const tags = [{ name: 'Action', value: 'Balances' }];
        const balances = await this.process.read({
            tags,
        });
        return balances;
    }
    /**
     * @param address @type {string} The address of the account you want the balance of.
     * @returns {Promise<number>} The balance of the provided address
     * @example
     * The current balance of the address.
     * ```ts
     * ant.getBalance({ address });
     * ```
     */
    async getBalance({ address }) {
        const tags = [
            { name: 'Action', value: 'Balance' },
            { name: 'Recipient', value: address },
        ];
        const balance = await this.process.read({
            tags,
        });
        return balance;
    }
}
exports.AoANTReadable = AoANTReadable;
class AoANTWriteable extends AoANTReadable {
    signer;
    constructor({ signer, ...config }) {
        super(config);
        this.signer = signer;
    }
    /**
     * @param target @type {string} The address of the account you want to transfer the ANT to.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.transfer({ target: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    async transfer({ target }) {
        const tags = [
            { name: 'Action', value: 'Transfer' },
            { name: 'Recipient', value: target },
        ];
        return this.process.send({
            tags,
            data: {},
            signer: this.signer,
        });
    }
    /**
     * @param controller @type {string} The address of the account you want to set as a controller.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    async addController({ controller, }) {
        const tags = [
            { name: 'Action', value: 'Add-Controller' },
            { name: 'Controller', value: controller },
        ];
        return this.process.send({
            tags,
            data: {},
            signer: this.signer,
        });
    }
    /**
     * @param controller @type {string} The address of the account you want to remove from the controllers list
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.removeController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    async removeController({ controller, }) {
        const tags = [
            { name: 'Action', value: 'Remove-Controller' },
            { name: 'Controller', value: controller },
        ];
        return this.process.send({
            tags,
            data: {},
            signer: this.signer,
        });
    }
    /**
     * @param undername @type {string} The record you want to set the transactionId and ttlSeconds of.
     * @param transactionId @type {string} The transactionId of the record.
     * @param ttlSeconds @type {number} The time to live of the record.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    async setRecord({ undername, transactionId, ttlSeconds, }) {
        return this.process.send({
            tags: [
                { name: 'Action', value: 'Set-Record' },
                { name: 'Sub-Domain', value: undername },
                { name: 'Transaction-Id', value: transactionId },
                { name: 'TTL-Seconds', value: ttlSeconds.toString() },
            ],
            data: { transactionId, ttlSeconds },
            signer: this.signer,
        });
    }
    /**
     * @param undername @type {string} The record you want to remove.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.removeRecord({ subDomain: "shorts" });
     * ```
     */
    async removeRecord({ undername, }) {
        return this.process.send({
            tags: [
                { name: 'Action', value: 'Remove-Record' },
                { name: 'Sub-Domain', value: undername },
            ],
            data: { undername },
            signer: this.signer,
        });
    }
    /**
     * @param ticker @type {string} Sets the ANT Ticker.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setTicker({ ticker: "KAPOW" });
     * ```
     */
    async setTicker({ ticker }) {
        return this.process.send({
            tags: [
                { name: 'Action', value: 'Set-Ticker' },
                { name: 'Ticker', value: ticker },
            ],
            data: { ticker },
            signer: this.signer,
        });
    }
    /**
     * @param name @type {string} Sets the Name of the ANT.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setName({ name: "ships at sea" });
     * ```
     */
    async setName({ name }) {
        return this.process.send({
            tags: [
                { name: 'Action', value: 'Set-Name' },
                { name: 'Name', value: name },
            ],
            data: { name },
            signer: this.signer,
        });
    }
}
exports.AoANTWriteable = AoANTWriteable;
