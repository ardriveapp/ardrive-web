"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbortError = exports.InvalidProcessConfigurationError = exports.InvalidContractConfigurationError = exports.InvalidSignerError = exports.WriteInteractionError = exports.UnknownError = exports.FailedRequestError = exports.BadRequest = exports.NotFound = exports.BaseError = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class BaseError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
    }
}
exports.BaseError = BaseError;
class NotFound extends BaseError {
}
exports.NotFound = NotFound;
class BadRequest extends BaseError {
}
exports.BadRequest = BadRequest;
class FailedRequestError extends BaseError {
    constructor(status, message) {
        super(`Failed request: ${status}: ${message}`);
    }
}
exports.FailedRequestError = FailedRequestError;
class UnknownError extends BaseError {
}
exports.UnknownError = UnknownError;
class WriteInteractionError extends BaseError {
}
exports.WriteInteractionError = WriteInteractionError;
class InvalidSignerError extends BaseError {
    constructor() {
        super('Invalid signer. Please provide a valid signer to interact with the contract.');
    }
}
exports.InvalidSignerError = InvalidSignerError;
class InvalidContractConfigurationError extends BaseError {
    constructor() {
        super('Invalid contract configuration');
    }
}
exports.InvalidContractConfigurationError = InvalidContractConfigurationError;
class InvalidProcessConfigurationError extends BaseError {
    constructor() {
        super('Invalid process configuration');
    }
}
exports.InvalidProcessConfigurationError = InvalidProcessConfigurationError;
class AbortError extends BaseError {
}
exports.AbortError = AbortError;
