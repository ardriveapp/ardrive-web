/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { WalletAddress } from './common.js';
export type Balances = Record<WalletAddress, number>;
export type Fees = Record<string, number>;
export type Observations = Record<number, EpochObservations>;
export declare const ioContractReadInteractions: readonly ["gateway", "gateways", "prescribedObservers", "record", "auction", "balance", "epoch", "priceForInteraction"];
export declare const ioContractWriteInteractions: readonly ["delegateStake", "decreaseDelegateStake", "joinNetwork", "increaseOperatorStake", "decreaseOperatorStake", "updateGatewaySettings", "saveObservations", "extendRecord", "buyRecord", "increaseUndernameCount", "transfer"];
export declare const ioContractInteractions: readonly ["gateway", "gateways", "prescribedObservers", "record", "auction", "balance", "epoch", "priceForInteraction", "delegateStake", "decreaseDelegateStake", "joinNetwork", "increaseOperatorStake", "decreaseOperatorStake", "updateGatewaySettings", "saveObservations", "extendRecord", "buyRecord", "increaseUndernameCount", "transfer"];
export type IOContractReadInteractions = (typeof ioContractReadInteractions)[number];
export type IOContractWriteInteractions = (typeof ioContractWriteInteractions)[number];
export type IOContractInteractions = (typeof ioContractInteractions)[number];
export type IOContractInteractionsWithIOFees = Extract<IOContractInteractions, 'buyRecord' | 'extendRecord' | 'increaseUndernameCount'>;
export declare const AR_IO_CONTRACT_FUNCTIONS: Record<string, IOContractInteractions>;
export type Gateway = {
    delegates: Record<WalletAddress, GatewayDelegate>;
    end: number;
    observerWallet: WalletAddress;
    operatorStake: number;
    settings: GatewaySettings;
    start: number;
    stats: GatewayStats;
    status: string;
    totalDelegatedStake: number;
    vaults: Record<WalletAddress, VaultData>;
    weights: ObserverWeights;
};
export type GatewayDelegate = {
    delegatedStake: number;
    start: number;
    vaults: Record<WalletAddress, VaultData>;
};
export type GatewayStakingSettings = {
    allowDelegatedStaking: boolean;
    delegateRewardShareRatio: number;
    minDelegatedStake: number;
    autoStake: boolean;
};
export type GatewayMetadata = {
    label: string;
    note: string;
    properties: string;
};
export type GatewayConnectionSettings = {
    fqdn: string;
    port: number;
    protocol: AllowedProtocols;
};
export type GatewaySettings = GatewayConnectionSettings & GatewayStakingSettings & GatewayMetadata;
export type AllowedProtocols = 'https';
export type GatewayStats = {
    failedConsecutiveEpochs: number;
    passedEpochCount: number;
    submittedEpochCount: number;
    totalEpochParticipationCount: number;
    totalEpochsPrescribedCount: number;
};
export type WeightedObserver = {
    gatewayAddress: WalletAddress;
    observerAddress: WalletAddress;
    stake: number;
    start: number;
} & ObserverWeights;
export type ObserverWeights = {
    stakeWeight: number;
    tenureWeight: number;
    gatewayRewardRatioWeight: number;
    observerRewardRatioWeight: number;
    compositeWeight: number;
    normalizedCompositeWeight: number;
};
export type RegistrationType = 'lease' | 'permabuy';
export type ArNSBaseNameData = {
    contractTxId: string;
    startTimestamp: number;
    type: RegistrationType;
    undernames: number;
    purchasePrice: number;
};
export type ArNSPermabuyData = ArNSBaseNameData & {
    type: 'permabuy';
};
export type ArNSLeaseData = ArNSBaseNameData & {
    type: 'lease';
    endTimestamp: number;
};
export type ArNSReservedNameData = {
    target?: string;
    endTimestamp?: number;
};
export type ArNSNameData = ArNSPermabuyData | ArNSLeaseData;
export type VaultData = {
    balance: number;
    start: number;
    end: number;
};
export declare enum DENOMINATIONS {
    IO = "IO",
    MIO = "mIO"
}
export type ReservedNameData = {
    target?: string;
    endTimestamp?: number;
};
export type ArNSBaseAuctionData = {
    startPrice: number;
    floorPrice: number;
    startHeight: number;
    endHeight: number;
    type: RegistrationType;
    initiator: string;
    contractTxId: string;
};
export type ArNSLeaseAuctionData = ArNSBaseAuctionData & {
    type: 'lease';
    years: 1;
};
export type ArNSPermabuyAuctionData = ArNSBaseAuctionData & {
    type: 'permabuy';
};
export type ArNSAuctionData = ArNSLeaseAuctionData | ArNSPermabuyAuctionData;
export type DemandFactoringData = {
    periodZeroBlockHeight: number;
    currentPeriod: number;
    trailingPeriodPurchases: number[];
    trailingPeriodRevenues: number[];
    purchasesThisPeriod: number;
    revenueThisPeriod: number;
    demandFactor: number;
    consecutivePeriodsWithMinDemandFactor: number;
};
export type EpochObservations = {
    failureSummaries: Record<string, string[]>;
    reports: Record<string, string>;
};
export type EpochDistributionData = {
    epochZeroStartHeight: number;
    epochStartHeight: number;
    epochEndHeight: number;
    epochPeriod: number;
    epochDistributionHeight: number;
    epochBlockLength: number;
};
export type Vaults = Record<string, VaultData>;
export type RegistryVaults = Record<string, Vaults>;
export type PrescribedObservers = Record<number, WeightedObserver[]>;
export interface ArIOState {
    balances: Balances;
    name: string;
    records: Record<string, ArNSNameData>;
    gateways: Record<string, Gateway>;
    fees: Fees;
    reserved: Record<string, ReservedNameData>;
    auctions: Record<string, ArNSAuctionData>;
    lastTickedHeight: number;
    demandFactoring: DemandFactoringData;
    observations: Observations;
    distributions: EpochDistributionData;
    vaults: RegistryVaults;
    prescribedObservers: PrescribedObservers;
}
export type ANTRecord = {
    transactionId: string;
    ttlSeconds: number;
};
export type ANTRecords = Record<string, ANTRecord> & {
    '@': ANTRecord;
};
export type ANTState = {
    owner: WalletAddress;
    controllers: WalletAddress[];
    name: string;
    ticker: string;
    records: ANTRecords;
    balances: Balances;
};
export declare const ANT_CONTRACT_FUNCTIONS: {
    TRANSFER: string;
    SET_CONTROLLER: string;
    REMOVE_CONTROLLER: string;
    SET_NAME: string;
    SET_TICKER: string;
    SET_RECORD: string;
    REMOVE_RECORD: string;
    BALANCE: string;
    EVOLVE: string;
};
