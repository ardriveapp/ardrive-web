/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import Arweave from 'arweave';
import { ArNSReservedNameData, EpochDistributionData, EpochObservations, WeightedObserver } from '../contract-state.js';
import { AoArNSNameData, AoEpochData, AoEpochSettings, AoGateway, AoIORead, AoIOWrite, EpochInput } from '../io.js';
import { mIOToken } from '../token.js';
import { AoArNSNameDataWithName, AoBalanceWithAddress, AoGatewayWithAddress, AoMessageResult, ContractSigner, JoinNetworkParams, PaginationParams, PaginationResult, ProcessConfiguration, TransactionId, UpdateGatewaySettingsParams, WalletAddress, WithSigner, WriteOptions } from '../types.js';
import { AOProcess } from './contracts/ao-process.js';
export declare class IO {
    static init(): AoIORead;
    static init({ process }: {
        process: AOProcess;
    }): AoIORead;
    static init({ process, signer, }: WithSigner<{
        process: AOProcess;
    }>): AoIOWrite;
    static init({ processId, signer, }: WithSigner<{
        processId: string;
    }>): AoIOWrite;
    static init({ processId, signer, }: {
        signer?: ContractSigner | undefined;
        processId: string;
    }): any;
    static init({ processId }: {
        processId: string;
    }): AoIORead;
}
export declare class IOReadable implements AoIORead {
    protected process: AOProcess;
    private arweave;
    constructor(config?: ProcessConfiguration, arweave?: Arweave);
    getInfo(): Promise<{
        Name: string;
        Ticker: string;
        Logo: string;
        Denomination: number;
    }>;
    getEpochSettings(params?: EpochInput): Promise<AoEpochSettings>;
    getEpoch(epoch?: EpochInput): Promise<AoEpochData>;
    getArNSRecord({ name, }: {
        name: string;
    }): Promise<AoArNSNameData | undefined>;
    getArNSRecords(pageParams?: PaginationParams): Promise<PaginationResult<AoArNSNameDataWithName>>;
    getArNSReservedNames(): Promise<Record<string, ArNSReservedNameData> | Record<string, never>>;
    getArNSReservedName({ name, }: {
        name: string;
    }): Promise<ArNSReservedNameData | undefined>;
    getBalance({ address }: {
        address: WalletAddress;
    }): Promise<number>;
    getBalances(pageParams?: PaginationParams): Promise<PaginationResult<AoBalanceWithAddress>>;
    getGateway({ address, }: {
        address: WalletAddress;
    }): Promise<AoGateway | undefined>;
    getGateways(pageParams?: PaginationParams): Promise<PaginationResult<AoGatewayWithAddress>>;
    getCurrentEpoch(): Promise<AoEpochData>;
    getPrescribedObservers(epoch?: EpochInput): Promise<WeightedObserver[]>;
    getPrescribedNames(epoch?: EpochInput): Promise<string[]>;
    getObservations(epoch?: EpochInput): Promise<EpochObservations>;
    getDistributions(epoch?: EpochInput): Promise<EpochDistributionData>;
    getTokenCost(params: {
        intent: 'Buy-Record';
        purchaseType: 'permabuy' | 'lease';
        years: number;
        name: string;
    }): Promise<number>;
    getTokenCost(params: {
        intent: 'Extend-Lease';
        years: number;
        name: string;
    }): Promise<number>;
    getTokenCost(params: {
        intent: 'Increase-Undername-Limit';
        quantity: number;
        name: string;
    }): Promise<number>;
}
export declare class IOWriteable extends IOReadable implements AoIOWrite {
    protected process: AOProcess;
    private signer;
    constructor({ signer, ...config }: WithSigner<{
        process?: AOProcess;
    } | {
        processId?: string;
    }>);
    transfer({ target, qty, }: {
        target: string;
        qty: number | mIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    joinNetwork({ operatorStake, allowDelegatedStaking, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, port, properties, protocol, autoStake, observerAddress, }: Omit<JoinNetworkParams, 'observerWallet' | 'qty'> & {
        observerAddress: string;
        operatorStake: number | mIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    leaveNetwork(options?: WriteOptions): Promise<AoMessageResult>;
    updateGatewaySettings({ allowDelegatedStaking, delegateRewardShareRatio, fqdn, label, minDelegatedStake, note, port, properties, protocol, autoStake, observerAddress, }: UpdateGatewaySettingsParams, options?: WriteOptions): Promise<AoMessageResult>;
    delegateStake(params: {
        target: string;
        stakeQty: number | mIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    decreaseDelegateStake(params: {
        target: string;
        decreaseQty: number | mIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    increaseOperatorStake(params: {
        increaseQty: number | mIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    decreaseOperatorStake(params: {
        decreaseQty: number | mIOToken;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    saveObservations(params: {
        reportTxId: TransactionId;
        failedGateways: WalletAddress[];
    }, options?: WriteOptions): Promise<AoMessageResult>;
    buyRecord(params: {
        name: string;
        years?: number;
        type: 'lease' | 'permabuy';
        processId: string;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    extendLease(params: {
        name: string;
        years: number;
    }, options?: WriteOptions): Promise<AoMessageResult>;
    increaseUndernameLimit(params: {
        name: string;
        increaseCount: number;
    }, options?: WriteOptions): Promise<AoMessageResult>;
}
