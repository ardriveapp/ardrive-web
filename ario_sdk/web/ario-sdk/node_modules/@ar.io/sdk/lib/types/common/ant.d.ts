/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { ANTRecord, AoANTRead, AoANTState, AoANTWrite, AoMessageResult, ProcessConfiguration, WalletAddress, WithSigner } from '../types.js';
import { AOProcess } from './index.js';
export declare class ANT {
    static init(config: Required<ProcessConfiguration> & {
        signer?: undefined;
    }): AoANTRead;
    static init({ signer, ...config }: WithSigner<Required<ProcessConfiguration>>): AoANTWrite;
}
export declare class AoANTReadable implements AoANTRead {
    protected process: AOProcess;
    constructor(config: Required<ProcessConfiguration>);
    getState(): Promise<AoANTState>;
    getInfo(): Promise<{
        Name: string;
        Ticker: string;
        Denomination: number;
        Owner: string;
    }>;
    /**
     * @param undername @type {string} The domain name.
     * @returns {Promise<ANTRecord>} The record of the undername domain.
     * @example
     * Get the current record
     * ```ts
     * ant.getRecord({ undername: "john" });
     * ```
     */
    getRecord({ undername }: {
        undername: string;
    }): Promise<ANTRecord>;
    /**
     * @returns {Promise<Record<string, ANTRecord>>} All the undernames managed by the ANT.
     * @example
     * Get the current records
     * ```ts
     * ant.getRecords();
     * ````
     */
    getRecords(): Promise<Record<string, ANTRecord>>;
    /**
     * @returns {Promise<string>} The owner of the ANT.
     * @example
     * Get the current owner
     * ```ts
     *  ant.getOwner();
     * ```
     */
    getOwner(): Promise<string>;
    /**
     * @returns {Promise<string[]>} The controllers of the ANT.
     * @example
     * Get the controllers of the ANT.
     * ```ts
     * ant.getControllers();
     * ```
     */
    getControllers(): Promise<WalletAddress[]>;
    /**
     * @returns {Promise<string>} The name of the ANT (not the same as ArNS name).
     * @example
     * Get the current name
     * ```ts
     * ant.getName();
     * ```
     */
    getName(): Promise<string>;
    /**
     * @returns {Promise<string>} The name of the ANT (not the same as ArNS name).
     * @example
     * The current ticker of the ANT.
     * ```ts
     * ant.getTicker();
     * ```
     */
    getTicker(): Promise<string>;
    /**
     * @returns {Promise<Record<WalletAddress, number>>} The balances of the ANT
     * @example
     * The current balances of the ANT.
     * ```ts
     * ant.getBalances();
     * ```
     */
    getBalances(): Promise<Record<string, number>>;
    /**
     * @param address @type {string} The address of the account you want the balance of.
     * @returns {Promise<number>} The balance of the provided address
     * @example
     * The current balance of the address.
     * ```ts
     * ant.getBalance({ address });
     * ```
     */
    getBalance({ address }: {
        address: string;
    }): Promise<number>;
}
export declare class AoANTWriteable extends AoANTReadable implements AoANTWrite {
    private signer;
    constructor({ signer, ...config }: WithSigner<Required<ProcessConfiguration>>);
    /**
     * @param target @type {string} The address of the account you want to transfer the ANT to.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.transfer({ target: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    transfer({ target }: {
        target: string;
    }): Promise<AoMessageResult>;
    /**
     * @param controller @type {string} The address of the account you want to set as a controller.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    addController({ controller, }: {
        controller: string;
    }): Promise<AoMessageResult>;
    /**
     * @param controller @type {string} The address of the account you want to remove from the controllers list
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.removeController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    removeController({ controller, }: {
        controller: string;
    }): Promise<AoMessageResult>;
    /**
     * @param undername @type {string} The record you want to set the transactionId and ttlSeconds of.
     * @param transactionId @type {string} The transactionId of the record.
     * @param ttlSeconds @type {number} The time to live of the record.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setController({ controller: "fGht8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5-5dV7nk" });
     * ```
     */
    setRecord({ undername, transactionId, ttlSeconds, }: {
        undername: string;
        transactionId: string;
        ttlSeconds: number;
    }): Promise<AoMessageResult>;
    /**
     * @param undername @type {string} The record you want to remove.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.removeRecord({ subDomain: "shorts" });
     * ```
     */
    removeRecord({ undername, }: {
        undername: string;
    }): Promise<AoMessageResult>;
    /**
     * @param ticker @type {string} Sets the ANT Ticker.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setTicker({ ticker: "KAPOW" });
     * ```
     */
    setTicker({ ticker }: {
        ticker: string;
    }): Promise<AoMessageResult>;
    /**
     * @param name @type {string} Sets the Name of the ANT.
     * @returns {Promise<AoMessageResult>} The result of the interaction.
     * @example
     * ```ts
     * ant.setName({ name: "ships at sea" });
     * ```
     */
    setName({ name }: {
        name: string;
    }): Promise<AoMessageResult>;
}
