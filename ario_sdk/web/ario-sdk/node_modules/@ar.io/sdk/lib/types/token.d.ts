interface Equatable<T> {
    equals(other: T): boolean;
}
declare class PositiveFiniteInteger implements Equatable<PositiveFiniteInteger> {
    private readonly positiveFiniteInteger;
    constructor(positiveFiniteInteger: number);
    [Symbol.toPrimitive](hint?: string): number | string;
    plus(positiveFiniteInteger: PositiveFiniteInteger): PositiveFiniteInteger;
    minus(positiveFiniteInteger: PositiveFiniteInteger): PositiveFiniteInteger;
    isGreaterThan(positiveFiniteInteger: PositiveFiniteInteger): boolean;
    isGreaterThanOrEqualTo(positiveFiniteInteger: PositiveFiniteInteger): boolean;
    isLessThan(positiveFiniteInteger: PositiveFiniteInteger): boolean;
    isLessThanOrEqualTo(positiveFiniteInteger: PositiveFiniteInteger): boolean;
    toString(): string;
    valueOf(): number;
    toJSON(): number;
    equals(other: PositiveFiniteInteger): boolean;
}
export declare class IOToken {
    protected value: number;
    constructor(value: number);
    valueOf(): number;
    toMIO(): mIOToken;
    toString(): string;
}
export declare class mIOToken extends PositiveFiniteInteger {
    constructor(value: number);
    multiply(multiplier: mIOToken | number): mIOToken;
    divide(divisor: mIOToken | number): mIOToken;
    plus(addend: mIOToken): mIOToken;
    minus(subtractHend: mIOToken): mIOToken;
    toIO(): IOToken;
}
export {};
