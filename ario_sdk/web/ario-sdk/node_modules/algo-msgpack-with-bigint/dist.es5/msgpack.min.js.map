{"version":3,"sources":["webpack://MessagePack/webpack/universalModuleDefinition","webpack://MessagePack/webpack/bootstrap","webpack://MessagePack/./src/utils/utf8.ts","webpack://MessagePack/./src/ExtData.ts","webpack://MessagePack/./src/utils/int.ts","webpack://MessagePack/./src/timestamp.ts","webpack://MessagePack/./src/ExtensionCodec.ts","webpack://MessagePack/./src/utils/typedArrays.ts","webpack://MessagePack/./src/Encoder.ts","webpack://MessagePack/./src/encode.ts","webpack://MessagePack/./src/utils/prettyByte.ts","webpack://MessagePack/./src/CachedKeyDecoder.ts","webpack://MessagePack/./src/Decoder.ts","webpack://MessagePack/./src/decode.ts","webpack://MessagePack/./src/utils/stream.ts","webpack://MessagePack/./src/decodeAsync.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TEXT_ENCODING_AVAILABLE","process","TextEncoder","TextDecoder","utf8Count","str","strLength","length","byteLength","pos","charCodeAt","extra","sharedTextEncoder","undefined","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","encodeInto","output","outputOffset","subarray","set","encode","utf8DecodeJs","bytes","inputOffset","offset","end","units","result","byte1","push","byte2","byte3","unit","String","fromCharCode","sharedTextDecoder","TEXT_DECODER_THRESHOLD","type","data","setInt64","view","high","Math","floor","low","setUint32","getInt64","getInt32","getUint32","exceeds_min_safe_int","Number","MIN_SAFE_INTEGER","exceeds_max_safe_int","MAX_SAFE_INTEGER","BigInt","EXT_TIMESTAMP","encodeTimeSpecToTimestamp","sec","nsec","rv","Uint8Array","DataView","buffer","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","nsecInSec","encodeTimestampExtension","Date","decodeTimestampToTimeSpec","byteOffset","nsec30AndSecHigh2","Error","decodeTimestampExtension","timeSpec","timestampExtension","decode","builtInEncoders","builtInDecoders","encoders","decoders","register","index","tryToEncode","context","encoder","ExtData","decoder","defaultCodec","ExtensionCodec","ensureUint8Array","ArrayBuffer","isView","from","extensionCodec","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","getUint8Array","reinitializeState","doEncode","depth","encodeNil","encodeBoolean","encodeNumber","encodeString","encodebigint","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeBig64","writeStringHeader","utf8EncodeJs","ext","encodeExtension","Array","isArray","encodeArray","encodeBinary","toString","apply","encodeMap","size","writeU8a","item","countWithoutUndefined","keys","count","sort","setUint8","values","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","setUint64","setBigInt64","defaultEncodeOptions","options","prettyByte","byte","abs","padStart","maxKeyLength","maxLengthPerKey","hit","miss","caches","canBeCached","records","recordsLength","FIND_CHUNK","record","recordBytes","j","store","random","cachedValue","slicedCopyOfBytes","slice","EMPTY_VIEW","EMPTY_BYTES","DataViewIndexOutOfBoundsError","getInt8","e","constructor","MORE_DATA","sharedCachedKeyDecoder","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","keyDecoder","totalPos","headByte","stack","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","remainingData","newData","concated","createNoExtraBytesError","posToShow","RangeError","doDecodeSingleSync","doDecodeSync","decodeAsync","stream","decoded","decodeArrayStream","decodeMultiAsync","decodeStream","isArrayHeaderRequired","arrayItemsLeft","readArraySize","complete","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","state","array","position","pop","keyType","map","readCount","headerOffset","stateIsMapKey","stringBytes","utf8DecodeTD","headOffset","extType","getUint8","getUint16","getInt16","getFloat32","getFloat64","defaultDecodeOptions","assertNonNull","ensureAsyncIterabe","streamLike","asyncIterator","reader","getReader","read","done","releaseLock","asyncIterableFromStream"],"mappings":"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","file":"msgpack.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MessagePack\"] = factory();\n\telse\n\t\troot[\"MessagePack\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const TEXT_ENCODING_AVAILABLE =\n  typeof process !== \"undefined\" &&\n  process.env.TEXT_ENCODING !== \"never\" &&\n  typeof TextEncoder !== \"undefined\" &&\n  typeof TextDecoder !== \"undefined\";\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = typeof process !== \"undefined\" && process.env.TEXT_ENCODING !== \"force\" ? 200 : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++];\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      const byte4 = bytes[offset++] & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = typeof process !== \"undefined\" && process.env.TEXT_DECODER !== \"force\" ? 200 : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return sharedTextDecoder!.decode(stringBytes);\n}\n","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n","// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setBigInt64(view: DataView, offset: number, value: bigint): void {\n  let high = Number(value / BigInt(0x1_0000_0000));\n  const low = Number(value % BigInt(0x1_0000_0000));\n  if (high < 0 && low !== 0) {\n    // simulate Math.floor for negative high\n    high -= 1;\n  }\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number) {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n\n  const exceeds_min_safe_int =\n    high < Math.floor(Number.MIN_SAFE_INTEGER / 0x1_0000_0000) ||\n    (high === Math.floor(Number.MIN_SAFE_INTEGER / 0x1_0000_0000) && low === 0);\n\n  const exceeds_max_safe_int = high > Math.floor(Number.MAX_SAFE_INTEGER / 0x1_0000_0000);\n\n  if (exceeds_min_safe_int || exceeds_max_safe_int) {\n    return BigInt(high) * BigInt(0x1_0000_0000) + BigInt(low);\n  }\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number) {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n\n  const exceeds_max_safe_int = high > Math.floor(Number.MAX_SAFE_INTEGER / 0x1_0000_0000);\n\n  if (exceeds_max_safe_int) {\n    return BigInt(high) * BigInt(0x1_0000_0000) + BigInt(low);\n  }\n  return high * 0x1_0000_0000 + low;\n}\n","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4) as number;\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n","// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interfce to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encoder = this.builtInEncoders[i];\n      if (encoder != null) {\n        const data = encoder(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encoder = this.encoders[i];\n      if (encoder != null) {\n        const data = encoder(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decoder = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decoder) {\n      return decoder(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n","export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer) {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n","import { utf8EncodeJs, utf8Count, TEXT_ENCODING_AVAILABLE, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64, setBigInt64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private getUint8Array(): Uint8Array {\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.getUint8Array();\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else if (typeof object === \"bigint\") {\n      this.encodebigint(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // nagative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private encodebigint(object: bigint) {\n    if (object >= BigInt(0)) {\n      if (object < BigInt(0x80)) {\n        // positive fixint\n        this.writeU8(Number(object));\n      } else if (object < BigInt(0x100)) {\n        // uint 8\n        this.writeU8(0xcc);\n        this.writeU8(Number(object));\n      } else if (object < BigInt(0x10000)) {\n        // uint 16\n        this.writeU8(0xcd);\n        this.writeU16(Number(object));\n      } else if (object < BigInt(0x100000000)) {\n        // uint 32\n        this.writeU8(0xce);\n        this.writeU32(Number(object));\n      } else {\n        // uint 64\n        this.writeU8(0xcf);\n        this.writeBig64(object);\n      }\n    } else {\n      if (object >= BigInt(-0x20)) {\n        // nagative fixint\n        this.writeU8(0xe0 | (Number(object) + 0x20));\n      } else if (object >= BigInt(-0x80)) {\n        // int 8\n        this.writeU8(0xd0);\n        this.writeI8(Number(object));\n      } else if (object >= BigInt(-0x8000)) {\n        // int 16\n        this.writeU8(0xd1);\n        this.writeI16(Number(object));\n      } else if (object >= BigInt(-0x80000000)) {\n        // int 32\n        this.writeU8(0xd2);\n        this.writeI32(Number(object));\n      } else {\n        // int 64\n        this.writeU8(0xd3);\n        this.writeBig64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (TEXT_ENCODING_AVAILABLE && strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeBig64(value: bigint) {\n    this.ensureBufferSizeToWrite(8);\n\n    setBigInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Encoder } from \"./Encoder\";\nimport { ContextOf, SplitUndefined } from \"./context\";\n\nexport type EncodeOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n    maxDepth: number;\n    initialBufferSize: number;\n    sortKeys: boolean;\n\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * The default is `false`. Note that it needs more time to encode.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point,\n     * with the `forceFloat32` option taken into account.\n     *\n     * The default is `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst defaultEncodeOptions: EncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType>(\n  value: unknown,\n  options: EncodeOptions<SplitUndefined<ContextType>> = defaultEncodeOptions as any,\n): Uint8Array {\n  const encoder = new Encoder<ContextType>(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n    options.ignoreUndefined,\n    options.forceIntegerToFloat,\n  );\n  return encoder.encode(value);\n}\n","export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n","import { utf8DecodeJs } from \"./utils/utf8\";\n\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly value: string;\n}\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)` to create a non-sparse array for performance.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number) {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private get(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1];\n    const recordsLength = records.length;\n\n    FIND_CHUNK: for (let i = 0; i < recordsLength; i++) {\n      const record = records[i];\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.value;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1];\n    const record: KeyCacheRecord = { bytes, value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to a randomized position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.get(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const value = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, value);\n    return value;\n  }\n}\n","import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64 } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_ENCODING_AVAILABLE, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst DEFAULT_MAX_LENGTH = 0xffff_ffff; // uint32_max\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType> {\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: Array<StackState> = [];\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxStrLength = DEFAULT_MAX_LENGTH,\n    private readonly maxBinLength = DEFAULT_MAX_LENGTH,\n    private readonly maxArrayLength = DEFAULT_MAX_LENGTH,\n    private readonly maxMapLength = DEFAULT_MAX_LENGTH,\n    private readonly maxExtLength = DEFAULT_MAX_LENGTH,\n    private readonly keyDecoder: KeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | ArrayBuffer): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number>) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining()) {\n      this.setBuffer(buffer);\n    } else {\n      // retried because data is insufficient\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n      const concated = new Uint8Array(remainingData.length + newData.length);\n      concated.set(remainingData);\n      concated.set(newData, remainingData.length);\n      this.setBuffer(concated);\n    }\n  }\n\n  private hasRemaining(size = 1) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createNoExtraBytesError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  public decode(buffer: ArrayLike<number> | ArrayBuffer): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n    return this.doDecodeSingleSync();\n  }\n\n  private doDecodeSingleSync(): unknown {\n    const object = this.doDecodeSync();\n    if (this.hasRemaining()) {\n      throw this.createNoExtraBytesError(this.pos);\n    }\n    return object;\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number>>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining()) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parcing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(stream: AsyncIterable<ArrayLike<number>>) {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number>>) {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number>>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new Error(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1];\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new Error(\"The type of key must be string or number but \" + typeof object);\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new Error(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new Error(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new Error(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new Error(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (TEXT_ENCODING_AVAILABLE && byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1];\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new Error(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new Error(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): bigint | number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): bigint | number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Decoder } from \"./Decoder\";\nimport { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a MessagePack-encoded buffer.\n *\n * This is a synchronous decoding function. See other variants for asynchronous decoding: `decodeAsync()`, `decodeStream()`, `decodeArrayStream()`.\n */\nexport function decode<ContextType>(\n  buffer: ArrayLike<number> | ArrayBuffer,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder<ContextType>(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n","// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterabe<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport { defaultDecodeOptions, DecodeOptions } from \"./decode\";\nimport { ensureAsyncIterabe, ReadableStreamLike } from \"./utils/stream\";\nimport { SplitUndefined } from \"./context\";\n\nexport async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder<ContextType>(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\nexport function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n) {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder<ContextType>(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n) {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder<ContextType>(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n"],"sourceRoot":""}