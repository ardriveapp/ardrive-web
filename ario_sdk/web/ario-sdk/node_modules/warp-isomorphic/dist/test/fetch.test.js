/**
 * @jest-environment node
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
require("../src/npm-node.js");
const express = require('express');
describe("(node) Fetch", () => {
    let app;
    beforeAll(() => {
        app = express();
        app.get('/', function (req, res) {
            res.json({ "good": "good" });
        });
        app = app.listen(3021);
    });
    afterAll(() => {
        app.close();
    });
    it("should be defined", () => {
        expect(fetch).toBeDefined();
    });
    it("should work on good requests", () => __awaiter(this, void 0, void 0, function* () {
        yield expect(fetch('http://localhost:3021').then(data => data.json())).resolves.toEqual({ good: "good" });
    }));
});
//# sourceMappingURL=fetch.test.js.map