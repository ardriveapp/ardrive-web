"use strict";var retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599],isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,r)=>r*Math.pow(1.5,e),logMessage=(e,r,t,s)=>`uri: ${e}
  response: Http status error [${r}]: ${t}
  retryAttempts: ${s}`,logger={retry:(e,r,t,s)=>{const a=logMessage(e,r,t,s);console.warn(`Network Request Retry
${a}`)},error:(e,r,t,s)=>{const a=logMessage(e,r,t,s);console.error(`Network Request Error
${a}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,r,t,s,a,g=!1,i=0])=>{try{const u=new AbortController,n=await fetch(e,{method:"GET",headers:{...JSON.parse(r)},redirect:"follow",signal:u.signal}),o=n.status,c=n.statusText;if(s>0&&retryStatusCodes.includes(o))return g||logger.retry(e,o,c,i),await get([e,r,t,s-1,a,g,i+1]);if(isStatusCodeError(o))return{error:`Network Request Error
${logMessage(e,o,c,i)}`,retryAttempts:i,statusCode:o,statusMessage:c};const p=await requestType[`${t}`].getResponse(n);return{statusCode:o,statusMessage:c,data:p,retryAttempts:i}}catch(u){return console.error(u),console.error(u.stack),{error:`${u}`,retryAttempts:i}}},post=async([e,r,t,s,a,g,i,u=!1,n=0])=>{try{const o=new AbortController,c=await fetch(e,{method:"POST",headers:{...s!==requestType.text.contentType?{"Content-Type":s}:{},...JSON.parse(r)},redirect:"follow",body:t,signal:o.signal}),p=c.status,l=c.statusText;if(g>0&&retryStatusCodes.includes(p))return u||logger.retry(e,p,l,n),await post([e,r,t,s,a,g-1,i,u,n+1]);if(isStatusCodeError(p))return{error:`Network Request Error
${logMessage(e,p,l,n)}`,retryAttempts:n,statusCode:p,statusMessage:l};const y=await requestType[a].getResponse(c);return{statusCode:p,statusMessage:l,data:y,retryAttempts:n}}catch(o){return{error:`${o}`,retryAttempts:n}}};self.get=get,self.post=post;
