"use strict";var retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599],isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,r)=>r*Math.pow(1.5,e),logMessage=(e,r,t,s)=>`uri: ${e}
  response: Http status error [${r}]: ${t}
  retryAttempts: ${s}`,logger={retry:(e,r,t,s)=>{const o=logMessage(e,r,t,s);console.warn(`Network Request Retry
${o}`)},error:(e,r,t,s)=>{const o=logMessage(e,r,t,s);console.error(`Network Request Error
${o}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,r,t,s,o=!1,a=0])=>{try{const n=new AbortController,i=setTimeout(()=>n.abort(),8e3),u=await fetch(e,{method:"GET",redirect:"follow",signal:n.signal});clearTimeout(i);const c=u.status,p=u.statusText;if(t>0&&retryStatusCodes.includes(c))return o||logger.retry(e,c,p,a),await get([e,r,t-1,s,o,a+1]);if(isStatusCodeError(c))return{error:`Network Request Error
${logMessage(e,c,p,a)}`,retryAttempts:a};const l=await requestType[`${r}`].getResponse(u);return{statusCode:c,statusMessage:p,data:l,retryAttempts:a}}catch(n){return console.error(n),console.error(n.stack),{error:`${n}`,retryAttempts:a}}},post=async([e,r,t,s,o,a,n=!1,i=0])=>{try{const u=new AbortController,c=setTimeout(()=>u.abort(),8e3),p=await fetch(e,{method:"POST",headers:{...t!==requestType.text.contentType?{"Content-Type":t}:{}},redirect:"follow",body:r,signal:u.signal});clearTimeout(c);const l=p.status,g=p.statusText;if(o>0&&retryStatusCodes.includes(l))return n||logger.retry(e,l,g,i),await post([e,r,t,s,o-1,a,n,i+1]);if(isStatusCodeError(l))return{error:`Network Request Error
${logMessage(e,l,g,i)}`,retryAttempts:i};const y=await requestType[`${s}`].getResponse(p);return{statusCode:l,statusMessage:g,data:y,retryAttempts:i}}catch(u){return{error:`${u}`,retryAttempts:i}}};self.get=get,self.post=post;
