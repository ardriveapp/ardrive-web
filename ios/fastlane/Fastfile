import "../../Fastfile"

# Update fastlane
update_fastlane

default_platform(:ios)

build_number = ENV['BUILD_NUMBER'] ? ENV['BUILD_NUMBER'] : 0
ios_firebase_app_id = "1:305132849030:ios:06ea33a95a2e0d42ffce07"

platform :ios do
  lane :build do |options|
    if options[:type].nil? then
      return
    end

    isProd = options[:type] == 'production'
    build_types = get_build_type(options[:type])
    type = build_types["ios_type"]
    export_method = build_types["ios_export_method"]
    flavor = build_types["ios_flavor"]

    # Setup keychain if CI
    setup_ci if is_ci

    # Download and install adhoc certificate and profile
    match(
      type: type,
      app_identifier: "io.ardrive.app",
      force_for_new_devices: true
    )

    # Flutter build
    fetch_dependencies
    build_autogenerated_code

    # Pod install
    sh("bundle", "exec", "pod", "install")

    # Set build number
    increment_build_number(
      build_number: build_number
    )

    # Build iOS project and generate an ad-hoc signed ipa
    build_ios_app(
      workspace: "Runner.xcworkspace",
      scheme: flavor,
      export_method: export_method,
      clean: true,
      include_bitcode: false,
    )
  end

  lane :deploy do |options|
    if options[:type].nil? then
      UI.user_error!("Build type is required. Please specify :type parameter")
    end

    isProd = options[:type] == 'production'

    # Validate environment variables
    if isProd
      UI.user_error!("RELEASE_NOTES environment variable is required for production builds") unless ENV['RELEASE_NOTES']
      UI.user_error!("FIREBASE_JSON environment variable is required for production builds") unless ENV['FIREBASE_JSON']
      UI.user_error!("BUILD_NUMBER environment variable is required for production builds") unless ENV['BUILD_NUMBER']
    end

    # Build the app
    build(type: options[:type])

    # Distribute to Firebase
    firebase_app_distribution(
      app: ios_firebase_app_id,
      release_notes: ENV['RELEASE_NOTES'],
      service_credentials_file: ENV['FIREBASE_JSON'],
      groups: isProd ? "Production" : "Testers"
    )

    if isProd
      # Deploy to App Store
      deploy_to_app_store
    end
  end

  lane :update_release_url do
    firebase_app_distribution_get_latest_release(
      app: ios_firebase_app_id,
      service_credentials_file: ENV['FIREBASE_JSON']
    )

    release_name = Actions.lane_context[:FIREBASE_APP_DISTRO_LATEST_RELEASE][:name]
    release_url = get_firebase_release_url(release_name, ios_firebase_app_id)

    update_pr_and_jira(release_url: release_url, ios: true)
  end

  lane :deploy_to_app_store do
    # Ensure we're on the main branch for production
    ensure_git_branch(branch: 'main')

    # Ensure we have a clean git status
    ensure_git_status_clean

    # Ensure we have the latest changes
    sh("git", "pull", "origin", "main")

    # Upload to App Store
    upload_to_app_store(
      force: true, # Skip verification of HTML preview
      skip_metadata: false,
      skip_screenshots: false,
      precheck_include_in_app_purchases: false,
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_uses_encryption: false,
        export_compliance_platform: 'ios'
      },
      reject_if_possible: true, # Automatically reject the binary if it's not ready for review
      automatic_release: false, # Don't automatically release the build
      phased_release: true, # Enable phased release
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_uses_encryption: false,
        export_compliance_platform: 'ios'
      }
    )
  end
end
